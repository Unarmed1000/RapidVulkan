#ifndef RAPIDVULKAN_DEBUGSTRINGS_HPP
#define RAPIDVULKAN_DEBUGSTRINGS_HPP
//***************************************************************************************************************************************************
//* BSD 3-Clause License
//*
//* Copyright (c) 2017, Rene Thrane
//* All rights reserved.
//*
//* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//*
//* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
//*    documentation and/or other materials provided with the distribution.
//* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this
//*    software without specific prior written permission.
//*
//* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
//* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//***************************************************************************************************************************************************

// If you use the functionality in this file its recommended to 'WRAP' it in a hpp/cpp file combo so its only included in one file!

// Auto-generated Vulkan 1.0 C++11 RAII classes by RAIIGen (https://github.com/Unarmed1000/RAIIGen)

#include <vulkan/vulkan.h>

namespace RapidVulkan
{
  namespace Debug
  {
    const char* ToString(const VkFenceCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_FENCE_CREATE_SIGNALED_BIT:
        return "VK_FENCE_CREATE_SIGNALED_BIT";
      case VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkFormat& value)
    {
      switch(value)
      {
      case VK_FORMAT_UNDEFINED:
        return "VK_FORMAT_UNDEFINED";
      case VK_FORMAT_R4G4_UNORM_PACK8:
        return "VK_FORMAT_R4G4_UNORM_PACK8";
      case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
        return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
      case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
        return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
      case VK_FORMAT_R5G6B5_UNORM_PACK16:
        return "VK_FORMAT_R5G6B5_UNORM_PACK16";
      case VK_FORMAT_B5G6R5_UNORM_PACK16:
        return "VK_FORMAT_B5G6R5_UNORM_PACK16";
      case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
        return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
      case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
        return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
      case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
        return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
      case VK_FORMAT_R8_UNORM:
        return "VK_FORMAT_R8_UNORM";
      case VK_FORMAT_R8_SNORM:
        return "VK_FORMAT_R8_SNORM";
      case VK_FORMAT_R8_USCALED:
        return "VK_FORMAT_R8_USCALED";
      case VK_FORMAT_R8_SSCALED:
        return "VK_FORMAT_R8_SSCALED";
      case VK_FORMAT_R8_UINT:
        return "VK_FORMAT_R8_UINT";
      case VK_FORMAT_R8_SINT:
        return "VK_FORMAT_R8_SINT";
      case VK_FORMAT_R8_SRGB:
        return "VK_FORMAT_R8_SRGB";
      case VK_FORMAT_R8G8_UNORM:
        return "VK_FORMAT_R8G8_UNORM";
      case VK_FORMAT_R8G8_SNORM:
        return "VK_FORMAT_R8G8_SNORM";
      case VK_FORMAT_R8G8_USCALED:
        return "VK_FORMAT_R8G8_USCALED";
      case VK_FORMAT_R8G8_SSCALED:
        return "VK_FORMAT_R8G8_SSCALED";
      case VK_FORMAT_R8G8_UINT:
        return "VK_FORMAT_R8G8_UINT";
      case VK_FORMAT_R8G8_SINT:
        return "VK_FORMAT_R8G8_SINT";
      case VK_FORMAT_R8G8_SRGB:
        return "VK_FORMAT_R8G8_SRGB";
      case VK_FORMAT_R8G8B8_UNORM:
        return "VK_FORMAT_R8G8B8_UNORM";
      case VK_FORMAT_R8G8B8_SNORM:
        return "VK_FORMAT_R8G8B8_SNORM";
      case VK_FORMAT_R8G8B8_USCALED:
        return "VK_FORMAT_R8G8B8_USCALED";
      case VK_FORMAT_R8G8B8_SSCALED:
        return "VK_FORMAT_R8G8B8_SSCALED";
      case VK_FORMAT_R8G8B8_UINT:
        return "VK_FORMAT_R8G8B8_UINT";
      case VK_FORMAT_R8G8B8_SINT:
        return "VK_FORMAT_R8G8B8_SINT";
      case VK_FORMAT_R8G8B8_SRGB:
        return "VK_FORMAT_R8G8B8_SRGB";
      case VK_FORMAT_B8G8R8_UNORM:
        return "VK_FORMAT_B8G8R8_UNORM";
      case VK_FORMAT_B8G8R8_SNORM:
        return "VK_FORMAT_B8G8R8_SNORM";
      case VK_FORMAT_B8G8R8_USCALED:
        return "VK_FORMAT_B8G8R8_USCALED";
      case VK_FORMAT_B8G8R8_SSCALED:
        return "VK_FORMAT_B8G8R8_SSCALED";
      case VK_FORMAT_B8G8R8_UINT:
        return "VK_FORMAT_B8G8R8_UINT";
      case VK_FORMAT_B8G8R8_SINT:
        return "VK_FORMAT_B8G8R8_SINT";
      case VK_FORMAT_B8G8R8_SRGB:
        return "VK_FORMAT_B8G8R8_SRGB";
      case VK_FORMAT_R8G8B8A8_UNORM:
        return "VK_FORMAT_R8G8B8A8_UNORM";
      case VK_FORMAT_R8G8B8A8_SNORM:
        return "VK_FORMAT_R8G8B8A8_SNORM";
      case VK_FORMAT_R8G8B8A8_USCALED:
        return "VK_FORMAT_R8G8B8A8_USCALED";
      case VK_FORMAT_R8G8B8A8_SSCALED:
        return "VK_FORMAT_R8G8B8A8_SSCALED";
      case VK_FORMAT_R8G8B8A8_UINT:
        return "VK_FORMAT_R8G8B8A8_UINT";
      case VK_FORMAT_R8G8B8A8_SINT:
        return "VK_FORMAT_R8G8B8A8_SINT";
      case VK_FORMAT_R8G8B8A8_SRGB:
        return "VK_FORMAT_R8G8B8A8_SRGB";
      case VK_FORMAT_B8G8R8A8_UNORM:
        return "VK_FORMAT_B8G8R8A8_UNORM";
      case VK_FORMAT_B8G8R8A8_SNORM:
        return "VK_FORMAT_B8G8R8A8_SNORM";
      case VK_FORMAT_B8G8R8A8_USCALED:
        return "VK_FORMAT_B8G8R8A8_USCALED";
      case VK_FORMAT_B8G8R8A8_SSCALED:
        return "VK_FORMAT_B8G8R8A8_SSCALED";
      case VK_FORMAT_B8G8R8A8_UINT:
        return "VK_FORMAT_B8G8R8A8_UINT";
      case VK_FORMAT_B8G8R8A8_SINT:
        return "VK_FORMAT_B8G8R8A8_SINT";
      case VK_FORMAT_B8G8R8A8_SRGB:
        return "VK_FORMAT_B8G8R8A8_SRGB";
      case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
        return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
      case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
        return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
      case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
        return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
      case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
        return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
      case VK_FORMAT_A8B8G8R8_UINT_PACK32:
        return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
      case VK_FORMAT_A8B8G8R8_SINT_PACK32:
        return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
      case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
        return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
      case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
        return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
      case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
        return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
      case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
        return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
      case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
        return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
      case VK_FORMAT_A2R10G10B10_UINT_PACK32:
        return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
      case VK_FORMAT_A2R10G10B10_SINT_PACK32:
        return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
      case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
        return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
      case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
        return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
      case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
        return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
      case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
        return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
      case VK_FORMAT_A2B10G10R10_UINT_PACK32:
        return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
      case VK_FORMAT_A2B10G10R10_SINT_PACK32:
        return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
      case VK_FORMAT_R16_UNORM:
        return "VK_FORMAT_R16_UNORM";
      case VK_FORMAT_R16_SNORM:
        return "VK_FORMAT_R16_SNORM";
      case VK_FORMAT_R16_USCALED:
        return "VK_FORMAT_R16_USCALED";
      case VK_FORMAT_R16_SSCALED:
        return "VK_FORMAT_R16_SSCALED";
      case VK_FORMAT_R16_UINT:
        return "VK_FORMAT_R16_UINT";
      case VK_FORMAT_R16_SINT:
        return "VK_FORMAT_R16_SINT";
      case VK_FORMAT_R16_SFLOAT:
        return "VK_FORMAT_R16_SFLOAT";
      case VK_FORMAT_R16G16_UNORM:
        return "VK_FORMAT_R16G16_UNORM";
      case VK_FORMAT_R16G16_SNORM:
        return "VK_FORMAT_R16G16_SNORM";
      case VK_FORMAT_R16G16_USCALED:
        return "VK_FORMAT_R16G16_USCALED";
      case VK_FORMAT_R16G16_SSCALED:
        return "VK_FORMAT_R16G16_SSCALED";
      case VK_FORMAT_R16G16_UINT:
        return "VK_FORMAT_R16G16_UINT";
      case VK_FORMAT_R16G16_SINT:
        return "VK_FORMAT_R16G16_SINT";
      case VK_FORMAT_R16G16_SFLOAT:
        return "VK_FORMAT_R16G16_SFLOAT";
      case VK_FORMAT_R16G16B16_UNORM:
        return "VK_FORMAT_R16G16B16_UNORM";
      case VK_FORMAT_R16G16B16_SNORM:
        return "VK_FORMAT_R16G16B16_SNORM";
      case VK_FORMAT_R16G16B16_USCALED:
        return "VK_FORMAT_R16G16B16_USCALED";
      case VK_FORMAT_R16G16B16_SSCALED:
        return "VK_FORMAT_R16G16B16_SSCALED";
      case VK_FORMAT_R16G16B16_UINT:
        return "VK_FORMAT_R16G16B16_UINT";
      case VK_FORMAT_R16G16B16_SINT:
        return "VK_FORMAT_R16G16B16_SINT";
      case VK_FORMAT_R16G16B16_SFLOAT:
        return "VK_FORMAT_R16G16B16_SFLOAT";
      case VK_FORMAT_R16G16B16A16_UNORM:
        return "VK_FORMAT_R16G16B16A16_UNORM";
      case VK_FORMAT_R16G16B16A16_SNORM:
        return "VK_FORMAT_R16G16B16A16_SNORM";
      case VK_FORMAT_R16G16B16A16_USCALED:
        return "VK_FORMAT_R16G16B16A16_USCALED";
      case VK_FORMAT_R16G16B16A16_SSCALED:
        return "VK_FORMAT_R16G16B16A16_SSCALED";
      case VK_FORMAT_R16G16B16A16_UINT:
        return "VK_FORMAT_R16G16B16A16_UINT";
      case VK_FORMAT_R16G16B16A16_SINT:
        return "VK_FORMAT_R16G16B16A16_SINT";
      case VK_FORMAT_R16G16B16A16_SFLOAT:
        return "VK_FORMAT_R16G16B16A16_SFLOAT";
      case VK_FORMAT_R32_UINT:
        return "VK_FORMAT_R32_UINT";
      case VK_FORMAT_R32_SINT:
        return "VK_FORMAT_R32_SINT";
      case VK_FORMAT_R32_SFLOAT:
        return "VK_FORMAT_R32_SFLOAT";
      case VK_FORMAT_R32G32_UINT:
        return "VK_FORMAT_R32G32_UINT";
      case VK_FORMAT_R32G32_SINT:
        return "VK_FORMAT_R32G32_SINT";
      case VK_FORMAT_R32G32_SFLOAT:
        return "VK_FORMAT_R32G32_SFLOAT";
      case VK_FORMAT_R32G32B32_UINT:
        return "VK_FORMAT_R32G32B32_UINT";
      case VK_FORMAT_R32G32B32_SINT:
        return "VK_FORMAT_R32G32B32_SINT";
      case VK_FORMAT_R32G32B32_SFLOAT:
        return "VK_FORMAT_R32G32B32_SFLOAT";
      case VK_FORMAT_R32G32B32A32_UINT:
        return "VK_FORMAT_R32G32B32A32_UINT";
      case VK_FORMAT_R32G32B32A32_SINT:
        return "VK_FORMAT_R32G32B32A32_SINT";
      case VK_FORMAT_R32G32B32A32_SFLOAT:
        return "VK_FORMAT_R32G32B32A32_SFLOAT";
      case VK_FORMAT_R64_UINT:
        return "VK_FORMAT_R64_UINT";
      case VK_FORMAT_R64_SINT:
        return "VK_FORMAT_R64_SINT";
      case VK_FORMAT_R64_SFLOAT:
        return "VK_FORMAT_R64_SFLOAT";
      case VK_FORMAT_R64G64_UINT:
        return "VK_FORMAT_R64G64_UINT";
      case VK_FORMAT_R64G64_SINT:
        return "VK_FORMAT_R64G64_SINT";
      case VK_FORMAT_R64G64_SFLOAT:
        return "VK_FORMAT_R64G64_SFLOAT";
      case VK_FORMAT_R64G64B64_UINT:
        return "VK_FORMAT_R64G64B64_UINT";
      case VK_FORMAT_R64G64B64_SINT:
        return "VK_FORMAT_R64G64B64_SINT";
      case VK_FORMAT_R64G64B64_SFLOAT:
        return "VK_FORMAT_R64G64B64_SFLOAT";
      case VK_FORMAT_R64G64B64A64_UINT:
        return "VK_FORMAT_R64G64B64A64_UINT";
      case VK_FORMAT_R64G64B64A64_SINT:
        return "VK_FORMAT_R64G64B64A64_SINT";
      case VK_FORMAT_R64G64B64A64_SFLOAT:
        return "VK_FORMAT_R64G64B64A64_SFLOAT";
      case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
        return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
      case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
        return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
      case VK_FORMAT_D16_UNORM:
        return "VK_FORMAT_D16_UNORM";
      case VK_FORMAT_X8_D24_UNORM_PACK32:
        return "VK_FORMAT_X8_D24_UNORM_PACK32";
      case VK_FORMAT_D32_SFLOAT:
        return "VK_FORMAT_D32_SFLOAT";
      case VK_FORMAT_S8_UINT:
        return "VK_FORMAT_S8_UINT";
      case VK_FORMAT_D16_UNORM_S8_UINT:
        return "VK_FORMAT_D16_UNORM_S8_UINT";
      case VK_FORMAT_D24_UNORM_S8_UINT:
        return "VK_FORMAT_D24_UNORM_S8_UINT";
      case VK_FORMAT_D32_SFLOAT_S8_UINT:
        return "VK_FORMAT_D32_SFLOAT_S8_UINT";
      case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
        return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
      case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
        return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
      case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
        return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
      case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
        return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
      case VK_FORMAT_BC2_UNORM_BLOCK:
        return "VK_FORMAT_BC2_UNORM_BLOCK";
      case VK_FORMAT_BC2_SRGB_BLOCK:
        return "VK_FORMAT_BC2_SRGB_BLOCK";
      case VK_FORMAT_BC3_UNORM_BLOCK:
        return "VK_FORMAT_BC3_UNORM_BLOCK";
      case VK_FORMAT_BC3_SRGB_BLOCK:
        return "VK_FORMAT_BC3_SRGB_BLOCK";
      case VK_FORMAT_BC4_UNORM_BLOCK:
        return "VK_FORMAT_BC4_UNORM_BLOCK";
      case VK_FORMAT_BC4_SNORM_BLOCK:
        return "VK_FORMAT_BC4_SNORM_BLOCK";
      case VK_FORMAT_BC5_UNORM_BLOCK:
        return "VK_FORMAT_BC5_UNORM_BLOCK";
      case VK_FORMAT_BC5_SNORM_BLOCK:
        return "VK_FORMAT_BC5_SNORM_BLOCK";
      case VK_FORMAT_BC6H_UFLOAT_BLOCK:
        return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
      case VK_FORMAT_BC6H_SFLOAT_BLOCK:
        return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
      case VK_FORMAT_BC7_UNORM_BLOCK:
        return "VK_FORMAT_BC7_UNORM_BLOCK";
      case VK_FORMAT_BC7_SRGB_BLOCK:
        return "VK_FORMAT_BC7_SRGB_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
      case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
        return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
      case VK_FORMAT_EAC_R11_UNORM_BLOCK:
        return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
      case VK_FORMAT_EAC_R11_SNORM_BLOCK:
        return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
      case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
        return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
      case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
        return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
      case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
      case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
      case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
      case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
      case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
      case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
      case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
      case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
      case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
      case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
      case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
      case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
      case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
      case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
      case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
      case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
      case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
      case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
      case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
      case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
      case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
      case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
      case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
      case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
      case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
      case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
      case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
        return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
      case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
        return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
      case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
        return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
      case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
        return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
      case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
        return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
      case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
        return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
      case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
        return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
      case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
        return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
      case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
        return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
      case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
        return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
      case VK_FORMAT_BEGIN_RANGE:
        return "VK_FORMAT_BEGIN_RANGE";
      case VK_FORMAT_END_RANGE:
        return "VK_FORMAT_END_RANGE";
      case VK_FORMAT_RANGE_SIZE:
        return "VK_FORMAT_RANGE_SIZE";
      case VK_FORMAT_MAX_ENUM:
        return "VK_FORMAT_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkBufferUsageFlagBits& value)
    {
      switch(value)
      {
      case VK_BUFFER_USAGE_TRANSFER_SRC_BIT:
        return "VK_BUFFER_USAGE_TRANSFER_SRC_BIT";
      case VK_BUFFER_USAGE_TRANSFER_DST_BIT:
        return "VK_BUFFER_USAGE_TRANSFER_DST_BIT";
      case VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT:
        return "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT";
      case VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT:
        return "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT";
      case VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT:
        return "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT";
      case VK_BUFFER_USAGE_STORAGE_BUFFER_BIT:
        return "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT";
      case VK_BUFFER_USAGE_INDEX_BUFFER_BIT:
        return "VK_BUFFER_USAGE_INDEX_BUFFER_BIT";
      case VK_BUFFER_USAGE_VERTEX_BUFFER_BIT:
        return "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT";
      case VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT:
        return "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT";
      case VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM:
        return "VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageAspectFlagBits& value)
    {
      switch(value)
      {
      case VK_IMAGE_ASPECT_COLOR_BIT:
        return "VK_IMAGE_ASPECT_COLOR_BIT";
      case VK_IMAGE_ASPECT_DEPTH_BIT:
        return "VK_IMAGE_ASPECT_DEPTH_BIT";
      case VK_IMAGE_ASPECT_STENCIL_BIT:
        return "VK_IMAGE_ASPECT_STENCIL_BIT";
      case VK_IMAGE_ASPECT_METADATA_BIT:
        return "VK_IMAGE_ASPECT_METADATA_BIT";
      case VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM:
        return "VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCommandBufferLevel& value)
    {
      switch(value)
      {
      case VK_COMMAND_BUFFER_LEVEL_PRIMARY:
        return "VK_COMMAND_BUFFER_LEVEL_PRIMARY";
      case VK_COMMAND_BUFFER_LEVEL_SECONDARY:
        return "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
      case VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE:
        return "VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE";
      case VK_COMMAND_BUFFER_LEVEL_END_RANGE:
        return "VK_COMMAND_BUFFER_LEVEL_END_RANGE";
      case VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE:
        return "VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE";
      case VK_COMMAND_BUFFER_LEVEL_MAX_ENUM:
        return "VK_COMMAND_BUFFER_LEVEL_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkInternalAllocationType& value)
    {
      switch(value)
      {
      case VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
        return "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE";
      case VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE:
        return "VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE";
      case VK_INTERNAL_ALLOCATION_TYPE_END_RANGE:
        return "VK_INTERNAL_ALLOCATION_TYPE_END_RANGE";
      case VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE:
        return "VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE";
      case VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM:
        return "VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkObjectType& value)
    {
      switch(value)
      {
      case VK_OBJECT_TYPE_UNKNOWN:
        return "VK_OBJECT_TYPE_UNKNOWN";
      case VK_OBJECT_TYPE_INSTANCE:
        return "VK_OBJECT_TYPE_INSTANCE";
      case VK_OBJECT_TYPE_PHYSICAL_DEVICE:
        return "VK_OBJECT_TYPE_PHYSICAL_DEVICE";
      case VK_OBJECT_TYPE_DEVICE:
        return "VK_OBJECT_TYPE_DEVICE";
      case VK_OBJECT_TYPE_QUEUE:
        return "VK_OBJECT_TYPE_QUEUE";
      case VK_OBJECT_TYPE_SEMAPHORE:
        return "VK_OBJECT_TYPE_SEMAPHORE";
      case VK_OBJECT_TYPE_COMMAND_BUFFER:
        return "VK_OBJECT_TYPE_COMMAND_BUFFER";
      case VK_OBJECT_TYPE_FENCE:
        return "VK_OBJECT_TYPE_FENCE";
      case VK_OBJECT_TYPE_DEVICE_MEMORY:
        return "VK_OBJECT_TYPE_DEVICE_MEMORY";
      case VK_OBJECT_TYPE_BUFFER:
        return "VK_OBJECT_TYPE_BUFFER";
      case VK_OBJECT_TYPE_IMAGE:
        return "VK_OBJECT_TYPE_IMAGE";
      case VK_OBJECT_TYPE_EVENT:
        return "VK_OBJECT_TYPE_EVENT";
      case VK_OBJECT_TYPE_QUERY_POOL:
        return "VK_OBJECT_TYPE_QUERY_POOL";
      case VK_OBJECT_TYPE_BUFFER_VIEW:
        return "VK_OBJECT_TYPE_BUFFER_VIEW";
      case VK_OBJECT_TYPE_IMAGE_VIEW:
        return "VK_OBJECT_TYPE_IMAGE_VIEW";
      case VK_OBJECT_TYPE_SHADER_MODULE:
        return "VK_OBJECT_TYPE_SHADER_MODULE";
      case VK_OBJECT_TYPE_PIPELINE_CACHE:
        return "VK_OBJECT_TYPE_PIPELINE_CACHE";
      case VK_OBJECT_TYPE_PIPELINE_LAYOUT:
        return "VK_OBJECT_TYPE_PIPELINE_LAYOUT";
      case VK_OBJECT_TYPE_RENDER_PASS:
        return "VK_OBJECT_TYPE_RENDER_PASS";
      case VK_OBJECT_TYPE_PIPELINE:
        return "VK_OBJECT_TYPE_PIPELINE";
      case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
        return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT";
      case VK_OBJECT_TYPE_SAMPLER:
        return "VK_OBJECT_TYPE_SAMPLER";
      case VK_OBJECT_TYPE_DESCRIPTOR_POOL:
        return "VK_OBJECT_TYPE_DESCRIPTOR_POOL";
      case VK_OBJECT_TYPE_DESCRIPTOR_SET:
        return "VK_OBJECT_TYPE_DESCRIPTOR_SET";
      case VK_OBJECT_TYPE_FRAMEBUFFER:
        return "VK_OBJECT_TYPE_FRAMEBUFFER";
      case VK_OBJECT_TYPE_COMMAND_POOL:
        return "VK_OBJECT_TYPE_COMMAND_POOL";
      case VK_OBJECT_TYPE_SURFACE_KHR:
        return "VK_OBJECT_TYPE_SURFACE_KHR";
      case VK_OBJECT_TYPE_SWAPCHAIN_KHR:
        return "VK_OBJECT_TYPE_SWAPCHAIN_KHR";
      case VK_OBJECT_TYPE_DISPLAY_KHR:
        return "VK_OBJECT_TYPE_DISPLAY_KHR";
      case VK_OBJECT_TYPE_DISPLAY_MODE_KHR:
        return "VK_OBJECT_TYPE_DISPLAY_MODE_KHR";
      case VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT:
        return "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT";
      case VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR:
        return "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR";
      case VK_OBJECT_TYPE_OBJECT_TABLE_NVX:
        return "VK_OBJECT_TYPE_OBJECT_TABLE_NVX";
      case VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX:
        return "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX";
      case VK_OBJECT_TYPE_BEGIN_RANGE:
        return "VK_OBJECT_TYPE_BEGIN_RANGE";
      case VK_OBJECT_TYPE_END_RANGE:
        return "VK_OBJECT_TYPE_END_RANGE";
      case VK_OBJECT_TYPE_RANGE_SIZE:
        return "VK_OBJECT_TYPE_RANGE_SIZE";
      case VK_OBJECT_TYPE_MAX_ENUM:
        return "VK_OBJECT_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPipelineCacheHeaderVersion& value)
    {
      switch(value)
      {
      case VK_PIPELINE_CACHE_HEADER_VERSION_ONE:
        return "VK_PIPELINE_CACHE_HEADER_VERSION_ONE";
      case VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE:
        return "VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE";
      case VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE:
        return "VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE";
      case VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE:
        return "VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE";
      case VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM:
        return "VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSharingMode& value)
    {
      switch(value)
      {
      case VK_SHARING_MODE_EXCLUSIVE:
        return "VK_SHARING_MODE_EXCLUSIVE";
      case VK_SHARING_MODE_CONCURRENT:
        return "VK_SHARING_MODE_CONCURRENT";
      case VK_SHARING_MODE_BEGIN_RANGE:
        return "VK_SHARING_MODE_BEGIN_RANGE";
      case VK_SHARING_MODE_END_RANGE:
        return "VK_SHARING_MODE_END_RANGE";
      case VK_SHARING_MODE_RANGE_SIZE:
        return "VK_SHARING_MODE_RANGE_SIZE";
      case VK_SHARING_MODE_MAX_ENUM:
        return "VK_SHARING_MODE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSystemAllocationScope& value)
    {
      switch(value)
      {
      case VK_SYSTEM_ALLOCATION_SCOPE_COMMAND:
        return "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND";
      case VK_SYSTEM_ALLOCATION_SCOPE_OBJECT:
        return "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT";
      case VK_SYSTEM_ALLOCATION_SCOPE_CACHE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_CACHE";
      case VK_SYSTEM_ALLOCATION_SCOPE_DEVICE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE";
      case VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE";
      case VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE";
      case VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE";
      case VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE:
        return "VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE";
      case VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM:
        return "VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkDescriptorPoolCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT:
        return "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT";
      case VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkStructureType& value)
    {
      switch(value)
      {
      case VK_STRUCTURE_TYPE_APPLICATION_INFO:
        return "VK_STRUCTURE_TYPE_APPLICATION_INFO";
      case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_SUBMIT_INFO:
        return "VK_STRUCTURE_TYPE_SUBMIT_INFO";
      case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
        return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO";
      case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
        return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE";
      case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
        return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO";
      case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO";
      case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO";
      case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO";
      case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO";
      case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO";
      case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO";
      case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO";
      case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO";
      case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO";
      case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
        return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO";
      case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
        return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET";
      case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
        return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET";
      case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO";
      case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO";
      case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO";
      case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
        return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO";
      case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
        return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO";
      case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
        return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO";
      case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
        return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO";
      case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
        return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER";
      case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
        return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER";
      case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
        return "VK_STRUCTURE_TYPE_MEMORY_BARRIER";
      case VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO:
        return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO";
      case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
        return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR";
      case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
        return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR";
      case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT";
      case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
        return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD";
      case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT";
      case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT";
      case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT";
      case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV";
      case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV";
      case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV";
      case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
        return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD";
      case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV";
      case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV";
      case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV:
        return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV";
      case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV:
        return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV";
      case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
        return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR";
      case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR:
        return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR";
      case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX:
        return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHX";
      case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX:
        return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX";
      case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX:
        return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX";
      case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX:
        return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX";
      case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
        return "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT";
      case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN:
        return "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHX";
      case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHX:
        return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHX";
      case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHX:
        return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHX";
      case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHX";
      case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX";
      case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX:
        return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHX";
      case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHX:
        return "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHX";
      case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHX:
        return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHX";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR";
      case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
        return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR";
      case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
        return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR";
      case VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX:
        return "VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX";
      case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX:
        return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX";
      case VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX:
        return "VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX";
      case VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX:
        return "VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX";
      case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX:
        return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX";
      case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX:
        return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX";
      case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV";
      case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT:
        return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT";
      case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT";
      case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT";
      case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
        return "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT";
      case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
        return "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT";
      case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
        return "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX";
      case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
        return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT";
      case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
        return "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT";
      case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
        return "VK_STRUCTURE_TYPE_HDR_METADATA_EXT";
      case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
        return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR";
      case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
        return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR";
      case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
        return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR";
      case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
        return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR";
      case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK:
        return "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK";
      case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK:
        return "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK";
      case VK_STRUCTURE_TYPE_BEGIN_RANGE:
        return "VK_STRUCTURE_TYPE_BEGIN_RANGE";
      case VK_STRUCTURE_TYPE_END_RANGE:
        return "VK_STRUCTURE_TYPE_END_RANGE";
      case VK_STRUCTURE_TYPE_RANGE_SIZE:
        return "VK_STRUCTURE_TYPE_RANGE_SIZE";
      case VK_STRUCTURE_TYPE_MAX_ENUM:
        return "VK_STRUCTURE_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkQueueFlagBits& value)
    {
      switch(value)
      {
      case VK_QUEUE_GRAPHICS_BIT:
        return "VK_QUEUE_GRAPHICS_BIT";
      case VK_QUEUE_COMPUTE_BIT:
        return "VK_QUEUE_COMPUTE_BIT";
      case VK_QUEUE_TRANSFER_BIT:
        return "VK_QUEUE_TRANSFER_BIT";
      case VK_QUEUE_SPARSE_BINDING_BIT:
        return "VK_QUEUE_SPARSE_BINDING_BIT";
      case VK_QUEUE_FLAG_BITS_MAX_ENUM:
        return "VK_QUEUE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkResult& value)
    {
      switch(value)
      {
      case VK_SUCCESS:
        return "VK_SUCCESS";
      case VK_NOT_READY:
        return "VK_NOT_READY";
      case VK_TIMEOUT:
        return "VK_TIMEOUT";
      case VK_EVENT_SET:
        return "VK_EVENT_SET";
      case VK_EVENT_RESET:
        return "VK_EVENT_RESET";
      case VK_INCOMPLETE:
        return "VK_INCOMPLETE";
      case VK_ERROR_OUT_OF_HOST_MEMORY:
        return "VK_ERROR_OUT_OF_HOST_MEMORY";
      case VK_ERROR_OUT_OF_DEVICE_MEMORY:
        return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
      case VK_ERROR_INITIALIZATION_FAILED:
        return "VK_ERROR_INITIALIZATION_FAILED";
      case VK_ERROR_DEVICE_LOST:
        return "VK_ERROR_DEVICE_LOST";
      case VK_ERROR_MEMORY_MAP_FAILED:
        return "VK_ERROR_MEMORY_MAP_FAILED";
      case VK_ERROR_LAYER_NOT_PRESENT:
        return "VK_ERROR_LAYER_NOT_PRESENT";
      case VK_ERROR_EXTENSION_NOT_PRESENT:
        return "VK_ERROR_EXTENSION_NOT_PRESENT";
      case VK_ERROR_FEATURE_NOT_PRESENT:
        return "VK_ERROR_FEATURE_NOT_PRESENT";
      case VK_ERROR_INCOMPATIBLE_DRIVER:
        return "VK_ERROR_INCOMPATIBLE_DRIVER";
      case VK_ERROR_TOO_MANY_OBJECTS:
        return "VK_ERROR_TOO_MANY_OBJECTS";
      case VK_ERROR_FORMAT_NOT_SUPPORTED:
        return "VK_ERROR_FORMAT_NOT_SUPPORTED";
      case VK_ERROR_FRAGMENTED_POOL:
        return "VK_ERROR_FRAGMENTED_POOL";
      case VK_ERROR_SURFACE_LOST_KHR:
        return "VK_ERROR_SURFACE_LOST_KHR";
      case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
        return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
      case VK_SUBOPTIMAL_KHR:
        return "VK_SUBOPTIMAL_KHR";
      case VK_ERROR_OUT_OF_DATE_KHR:
        return "VK_ERROR_OUT_OF_DATE_KHR";
      case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
        return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
      case VK_ERROR_VALIDATION_FAILED_EXT:
        return "VK_ERROR_VALIDATION_FAILED_EXT";
      case VK_ERROR_INVALID_SHADER_NV:
        return "VK_ERROR_INVALID_SHADER_NV";
      case VK_ERROR_OUT_OF_POOL_MEMORY_KHR:
        return "VK_ERROR_OUT_OF_POOL_MEMORY_KHR";
      case VK_ERROR_INVALID_EXTERNAL_HANDLE_KHX:
        return "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHX";
      case VK_RESULT_BEGIN_RANGE:
        return "VK_RESULT_BEGIN_RANGE";
      case VK_RESULT_END_RANGE:
        return "VK_RESULT_END_RANGE";
      case VK_RESULT_RANGE_SIZE:
        return "VK_RESULT_RANGE_SIZE";
      case VK_RESULT_MAX_ENUM:
        return "VK_RESULT_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkDescriptorType& value)
    {
      switch(value)
      {
      case VK_DESCRIPTOR_TYPE_SAMPLER:
        return "VK_DESCRIPTOR_TYPE_SAMPLER";
      case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
        return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER";
      case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
        return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
      case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
        return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE";
      case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
        return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
      case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
        return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
      case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
        return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
      case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
        return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER";
      case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
        return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
      case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
        return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
      case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
        return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
      case VK_DESCRIPTOR_TYPE_BEGIN_RANGE:
        return "VK_DESCRIPTOR_TYPE_BEGIN_RANGE";
      case VK_DESCRIPTOR_TYPE_END_RANGE:
        return "VK_DESCRIPTOR_TYPE_END_RANGE";
      case VK_DESCRIPTOR_TYPE_RANGE_SIZE:
        return "VK_DESCRIPTOR_TYPE_RANGE_SIZE";
      case VK_DESCRIPTOR_TYPE_MAX_ENUM:
        return "VK_DESCRIPTOR_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageType& value)
    {
      switch(value)
      {
      case VK_IMAGE_TYPE_1D:
        return "VK_IMAGE_TYPE_1D";
      case VK_IMAGE_TYPE_2D:
        return "VK_IMAGE_TYPE_2D";
      case VK_IMAGE_TYPE_3D:
        return "VK_IMAGE_TYPE_3D";
      case VK_IMAGE_TYPE_BEGIN_RANGE:
        return "VK_IMAGE_TYPE_BEGIN_RANGE";
      case VK_IMAGE_TYPE_END_RANGE:
        return "VK_IMAGE_TYPE_END_RANGE";
      case VK_IMAGE_TYPE_RANGE_SIZE:
        return "VK_IMAGE_TYPE_RANGE_SIZE";
      case VK_IMAGE_TYPE_MAX_ENUM:
        return "VK_IMAGE_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkQueryPipelineStatisticFlagBits& value)
    {
      switch(value)
      {
      case VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT:
        return "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT";
      case VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM:
        return "VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkFrontFace& value)
    {
      switch(value)
      {
      case VK_FRONT_FACE_COUNTER_CLOCKWISE:
        return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
      case VK_FRONT_FACE_CLOCKWISE:
        return "VK_FRONT_FACE_CLOCKWISE";
      case VK_FRONT_FACE_BEGIN_RANGE:
        return "VK_FRONT_FACE_BEGIN_RANGE";
      case VK_FRONT_FACE_END_RANGE:
        return "VK_FRONT_FACE_END_RANGE";
      case VK_FRONT_FACE_RANGE_SIZE:
        return "VK_FRONT_FACE_RANGE_SIZE";
      case VK_FRONT_FACE_MAX_ENUM:
        return "VK_FRONT_FACE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPipelineStageFlagBits& value)
    {
      switch(value)
      {
      case VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT:
        return "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT";
      case VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT:
        return "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT";
      case VK_PIPELINE_STAGE_VERTEX_INPUT_BIT:
        return "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT";
      case VK_PIPELINE_STAGE_VERTEX_SHADER_BIT:
        return "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT";
      case VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:
        return "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT";
      case VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT:
        return "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT";
      case VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT:
        return "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT";
      case VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT:
        return "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT";
      case VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:
        return "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT";
      case VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:
        return "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT";
      case VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:
        return "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT";
      case VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT:
        return "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT";
      case VK_PIPELINE_STAGE_TRANSFER_BIT:
        return "VK_PIPELINE_STAGE_TRANSFER_BIT";
      case VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT:
        return "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT";
      case VK_PIPELINE_STAGE_HOST_BIT:
        return "VK_PIPELINE_STAGE_HOST_BIT";
      case VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT:
        return "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT";
      case VK_PIPELINE_STAGE_ALL_COMMANDS_BIT:
        return "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT";
      case VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX:
        return "VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX";
      case VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM:
        return "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageTiling& value)
    {
      switch(value)
      {
      case VK_IMAGE_TILING_OPTIMAL:
        return "VK_IMAGE_TILING_OPTIMAL";
      case VK_IMAGE_TILING_LINEAR:
        return "VK_IMAGE_TILING_LINEAR";
      case VK_IMAGE_TILING_BEGIN_RANGE:
        return "VK_IMAGE_TILING_BEGIN_RANGE";
      case VK_IMAGE_TILING_END_RANGE:
        return "VK_IMAGE_TILING_END_RANGE";
      case VK_IMAGE_TILING_RANGE_SIZE:
        return "VK_IMAGE_TILING_RANGE_SIZE";
      case VK_IMAGE_TILING_MAX_ENUM:
        return "VK_IMAGE_TILING_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPhysicalDeviceType& value)
    {
      switch(value)
      {
      case VK_PHYSICAL_DEVICE_TYPE_OTHER:
        return "VK_PHYSICAL_DEVICE_TYPE_OTHER";
      case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
        return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU";
      case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
        return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU";
      case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:
        return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU";
      case VK_PHYSICAL_DEVICE_TYPE_CPU:
        return "VK_PHYSICAL_DEVICE_TYPE_CPU";
      case VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE:
        return "VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE";
      case VK_PHYSICAL_DEVICE_TYPE_END_RANGE:
        return "VK_PHYSICAL_DEVICE_TYPE_END_RANGE";
      case VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE:
        return "VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE";
      case VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM:
        return "VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkAccessFlagBits& value)
    {
      switch(value)
      {
      case VK_ACCESS_INDIRECT_COMMAND_READ_BIT:
        return "VK_ACCESS_INDIRECT_COMMAND_READ_BIT";
      case VK_ACCESS_INDEX_READ_BIT:
        return "VK_ACCESS_INDEX_READ_BIT";
      case VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT:
        return "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT";
      case VK_ACCESS_UNIFORM_READ_BIT:
        return "VK_ACCESS_UNIFORM_READ_BIT";
      case VK_ACCESS_INPUT_ATTACHMENT_READ_BIT:
        return "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT";
      case VK_ACCESS_SHADER_READ_BIT:
        return "VK_ACCESS_SHADER_READ_BIT";
      case VK_ACCESS_SHADER_WRITE_BIT:
        return "VK_ACCESS_SHADER_WRITE_BIT";
      case VK_ACCESS_COLOR_ATTACHMENT_READ_BIT:
        return "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT";
      case VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT:
        return "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT";
      case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT:
        return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT";
      case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT:
        return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT";
      case VK_ACCESS_TRANSFER_READ_BIT:
        return "VK_ACCESS_TRANSFER_READ_BIT";
      case VK_ACCESS_TRANSFER_WRITE_BIT:
        return "VK_ACCESS_TRANSFER_WRITE_BIT";
      case VK_ACCESS_HOST_READ_BIT:
        return "VK_ACCESS_HOST_READ_BIT";
      case VK_ACCESS_HOST_WRITE_BIT:
        return "VK_ACCESS_HOST_WRITE_BIT";
      case VK_ACCESS_MEMORY_READ_BIT:
        return "VK_ACCESS_MEMORY_READ_BIT";
      case VK_ACCESS_MEMORY_WRITE_BIT:
        return "VK_ACCESS_MEMORY_WRITE_BIT";
      case VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX:
        return "VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX";
      case VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX:
        return "VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX";
      case VK_ACCESS_FLAG_BITS_MAX_ENUM:
        return "VK_ACCESS_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkIndexType& value)
    {
      switch(value)
      {
      case VK_INDEX_TYPE_UINT16:
        return "VK_INDEX_TYPE_UINT16";
      case VK_INDEX_TYPE_UINT32:
        return "VK_INDEX_TYPE_UINT32";
      case VK_INDEX_TYPE_BEGIN_RANGE:
        return "VK_INDEX_TYPE_BEGIN_RANGE";
      case VK_INDEX_TYPE_END_RANGE:
        return "VK_INDEX_TYPE_END_RANGE";
      case VK_INDEX_TYPE_RANGE_SIZE:
        return "VK_INDEX_TYPE_RANGE_SIZE";
      case VK_INDEX_TYPE_MAX_ENUM:
        return "VK_INDEX_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkBlendOp& value)
    {
      switch(value)
      {
      case VK_BLEND_OP_ADD:
        return "VK_BLEND_OP_ADD";
      case VK_BLEND_OP_SUBTRACT:
        return "VK_BLEND_OP_SUBTRACT";
      case VK_BLEND_OP_REVERSE_SUBTRACT:
        return "VK_BLEND_OP_REVERSE_SUBTRACT";
      case VK_BLEND_OP_MIN:
        return "VK_BLEND_OP_MIN";
      case VK_BLEND_OP_MAX:
        return "VK_BLEND_OP_MAX";
      case VK_BLEND_OP_BEGIN_RANGE:
        return "VK_BLEND_OP_BEGIN_RANGE";
      case VK_BLEND_OP_END_RANGE:
        return "VK_BLEND_OP_END_RANGE";
      case VK_BLEND_OP_RANGE_SIZE:
        return "VK_BLEND_OP_RANGE_SIZE";
      case VK_BLEND_OP_MAX_ENUM:
        return "VK_BLEND_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkQueryType& value)
    {
      switch(value)
      {
      case VK_QUERY_TYPE_OCCLUSION:
        return "VK_QUERY_TYPE_OCCLUSION";
      case VK_QUERY_TYPE_PIPELINE_STATISTICS:
        return "VK_QUERY_TYPE_PIPELINE_STATISTICS";
      case VK_QUERY_TYPE_TIMESTAMP:
        return "VK_QUERY_TYPE_TIMESTAMP";
      case VK_QUERY_TYPE_BEGIN_RANGE:
        return "VK_QUERY_TYPE_BEGIN_RANGE";
      case VK_QUERY_TYPE_END_RANGE:
        return "VK_QUERY_TYPE_END_RANGE";
      case VK_QUERY_TYPE_RANGE_SIZE:
        return "VK_QUERY_TYPE_RANGE_SIZE";
      case VK_QUERY_TYPE_MAX_ENUM:
        return "VK_QUERY_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkQueryResultFlagBits& value)
    {
      switch(value)
      {
      case VK_QUERY_RESULT_64_BIT:
        return "VK_QUERY_RESULT_64_BIT";
      case VK_QUERY_RESULT_WAIT_BIT:
        return "VK_QUERY_RESULT_WAIT_BIT";
      case VK_QUERY_RESULT_WITH_AVAILABILITY_BIT:
        return "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT";
      case VK_QUERY_RESULT_PARTIAL_BIT:
        return "VK_QUERY_RESULT_PARTIAL_BIT";
      case VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM:
        return "VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkMemoryHeapFlagBits& value)
    {
      switch(value)
      {
      case VK_MEMORY_HEAP_DEVICE_LOCAL_BIT:
        return "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT";
      case VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX:
        return "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHX";
      case VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM:
        return "VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageLayout& value)
    {
      switch(value)
      {
      case VK_IMAGE_LAYOUT_UNDEFINED:
        return "VK_IMAGE_LAYOUT_UNDEFINED";
      case VK_IMAGE_LAYOUT_GENERAL:
        return "VK_IMAGE_LAYOUT_GENERAL";
      case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
        return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
      case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
        return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
      case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
        return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
      case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
        return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
      case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
        return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
      case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
        return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
      case VK_IMAGE_LAYOUT_PREINITIALIZED:
        return "VK_IMAGE_LAYOUT_PREINITIALIZED";
      case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
        return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
      case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR:
        return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
      case VK_IMAGE_LAYOUT_BEGIN_RANGE:
        return "VK_IMAGE_LAYOUT_BEGIN_RANGE";
      case VK_IMAGE_LAYOUT_END_RANGE:
        return "VK_IMAGE_LAYOUT_END_RANGE";
      case VK_IMAGE_LAYOUT_RANGE_SIZE:
        return "VK_IMAGE_LAYOUT_RANGE_SIZE";
      case VK_IMAGE_LAYOUT_MAX_ENUM:
        return "VK_IMAGE_LAYOUT_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPipelineCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT:
        return "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT";
      case VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT:
        return "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT";
      case VK_PIPELINE_CREATE_DERIVATIVE_BIT:
        return "VK_PIPELINE_CREATE_DERIVATIVE_BIT";
      case VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX:
        return "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX";
      case VK_PIPELINE_CREATE_DISPATCH_BASE_KHX:
        return "VK_PIPELINE_CREATE_DISPATCH_BASE_KHX";
      case VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageViewType& value)
    {
      switch(value)
      {
      case VK_IMAGE_VIEW_TYPE_1D:
        return "VK_IMAGE_VIEW_TYPE_1D";
      case VK_IMAGE_VIEW_TYPE_2D:
        return "VK_IMAGE_VIEW_TYPE_2D";
      case VK_IMAGE_VIEW_TYPE_3D:
        return "VK_IMAGE_VIEW_TYPE_3D";
      case VK_IMAGE_VIEW_TYPE_CUBE:
        return "VK_IMAGE_VIEW_TYPE_CUBE";
      case VK_IMAGE_VIEW_TYPE_1D_ARRAY:
        return "VK_IMAGE_VIEW_TYPE_1D_ARRAY";
      case VK_IMAGE_VIEW_TYPE_2D_ARRAY:
        return "VK_IMAGE_VIEW_TYPE_2D_ARRAY";
      case VK_IMAGE_VIEW_TYPE_CUBE_ARRAY:
        return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
      case VK_IMAGE_VIEW_TYPE_BEGIN_RANGE:
        return "VK_IMAGE_VIEW_TYPE_BEGIN_RANGE";
      case VK_IMAGE_VIEW_TYPE_END_RANGE:
        return "VK_IMAGE_VIEW_TYPE_END_RANGE";
      case VK_IMAGE_VIEW_TYPE_RANGE_SIZE:
        return "VK_IMAGE_VIEW_TYPE_RANGE_SIZE";
      case VK_IMAGE_VIEW_TYPE_MAX_ENUM:
        return "VK_IMAGE_VIEW_TYPE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkComponentSwizzle& value)
    {
      switch(value)
      {
      case VK_COMPONENT_SWIZZLE_IDENTITY:
        return "VK_COMPONENT_SWIZZLE_IDENTITY";
      case VK_COMPONENT_SWIZZLE_ZERO:
        return "VK_COMPONENT_SWIZZLE_ZERO";
      case VK_COMPONENT_SWIZZLE_ONE:
        return "VK_COMPONENT_SWIZZLE_ONE";
      case VK_COMPONENT_SWIZZLE_R:
        return "VK_COMPONENT_SWIZZLE_R";
      case VK_COMPONENT_SWIZZLE_G:
        return "VK_COMPONENT_SWIZZLE_G";
      case VK_COMPONENT_SWIZZLE_B:
        return "VK_COMPONENT_SWIZZLE_B";
      case VK_COMPONENT_SWIZZLE_A:
        return "VK_COMPONENT_SWIZZLE_A";
      case VK_COMPONENT_SWIZZLE_BEGIN_RANGE:
        return "VK_COMPONENT_SWIZZLE_BEGIN_RANGE";
      case VK_COMPONENT_SWIZZLE_END_RANGE:
        return "VK_COMPONENT_SWIZZLE_END_RANGE";
      case VK_COMPONENT_SWIZZLE_RANGE_SIZE:
        return "VK_COMPONENT_SWIZZLE_RANGE_SIZE";
      case VK_COMPONENT_SWIZZLE_MAX_ENUM:
        return "VK_COMPONENT_SWIZZLE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCommandBufferUsageFlagBits& value)
    {
      switch(value)
      {
      case VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT:
        return "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT";
      case VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT:
        return "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT";
      case VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT:
        return "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT";
      case VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM:
        return "VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPrimitiveTopology& value)
    {
      switch(value)
      {
      case VK_PRIMITIVE_TOPOLOGY_POINT_LIST:
        return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
      case VK_PRIMITIVE_TOPOLOGY_LINE_LIST:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
      case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
      case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
      case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
      case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
      case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
      case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
      case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
      case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
      case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST:
        return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
      case VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE:
        return "VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE";
      case VK_PRIMITIVE_TOPOLOGY_END_RANGE:
        return "VK_PRIMITIVE_TOPOLOGY_END_RANGE";
      case VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE:
        return "VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE";
      case VK_PRIMITIVE_TOPOLOGY_MAX_ENUM:
        return "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkVertexInputRate& value)
    {
      switch(value)
      {
      case VK_VERTEX_INPUT_RATE_VERTEX:
        return "VK_VERTEX_INPUT_RATE_VERTEX";
      case VK_VERTEX_INPUT_RATE_INSTANCE:
        return "VK_VERTEX_INPUT_RATE_INSTANCE";
      case VK_VERTEX_INPUT_RATE_BEGIN_RANGE:
        return "VK_VERTEX_INPUT_RATE_BEGIN_RANGE";
      case VK_VERTEX_INPUT_RATE_END_RANGE:
        return "VK_VERTEX_INPUT_RATE_END_RANGE";
      case VK_VERTEX_INPUT_RATE_RANGE_SIZE:
        return "VK_VERTEX_INPUT_RATE_RANGE_SIZE";
      case VK_VERTEX_INPUT_RATE_MAX_ENUM:
        return "VK_VERTEX_INPUT_RATE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPolygonMode& value)
    {
      switch(value)
      {
      case VK_POLYGON_MODE_FILL:
        return "VK_POLYGON_MODE_FILL";
      case VK_POLYGON_MODE_LINE:
        return "VK_POLYGON_MODE_LINE";
      case VK_POLYGON_MODE_POINT:
        return "VK_POLYGON_MODE_POINT";
      case VK_POLYGON_MODE_BEGIN_RANGE:
        return "VK_POLYGON_MODE_BEGIN_RANGE";
      case VK_POLYGON_MODE_END_RANGE:
        return "VK_POLYGON_MODE_END_RANGE";
      case VK_POLYGON_MODE_RANGE_SIZE:
        return "VK_POLYGON_MODE_RANGE_SIZE";
      case VK_POLYGON_MODE_MAX_ENUM:
        return "VK_POLYGON_MODE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCompareOp& value)
    {
      switch(value)
      {
      case VK_COMPARE_OP_NEVER:
        return "VK_COMPARE_OP_NEVER";
      case VK_COMPARE_OP_LESS:
        return "VK_COMPARE_OP_LESS";
      case VK_COMPARE_OP_EQUAL:
        return "VK_COMPARE_OP_EQUAL";
      case VK_COMPARE_OP_LESS_OR_EQUAL:
        return "VK_COMPARE_OP_LESS_OR_EQUAL";
      case VK_COMPARE_OP_GREATER:
        return "VK_COMPARE_OP_GREATER";
      case VK_COMPARE_OP_NOT_EQUAL:
        return "VK_COMPARE_OP_NOT_EQUAL";
      case VK_COMPARE_OP_GREATER_OR_EQUAL:
        return "VK_COMPARE_OP_GREATER_OR_EQUAL";
      case VK_COMPARE_OP_ALWAYS:
        return "VK_COMPARE_OP_ALWAYS";
      case VK_COMPARE_OP_BEGIN_RANGE:
        return "VK_COMPARE_OP_BEGIN_RANGE";
      case VK_COMPARE_OP_END_RANGE:
        return "VK_COMPARE_OP_END_RANGE";
      case VK_COMPARE_OP_RANGE_SIZE:
        return "VK_COMPARE_OP_RANGE_SIZE";
      case VK_COMPARE_OP_MAX_ENUM:
        return "VK_COMPARE_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkStencilOp& value)
    {
      switch(value)
      {
      case VK_STENCIL_OP_KEEP:
        return "VK_STENCIL_OP_KEEP";
      case VK_STENCIL_OP_ZERO:
        return "VK_STENCIL_OP_ZERO";
      case VK_STENCIL_OP_REPLACE:
        return "VK_STENCIL_OP_REPLACE";
      case VK_STENCIL_OP_INCREMENT_AND_CLAMP:
        return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
      case VK_STENCIL_OP_DECREMENT_AND_CLAMP:
        return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
      case VK_STENCIL_OP_INVERT:
        return "VK_STENCIL_OP_INVERT";
      case VK_STENCIL_OP_INCREMENT_AND_WRAP:
        return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
      case VK_STENCIL_OP_DECREMENT_AND_WRAP:
        return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
      case VK_STENCIL_OP_BEGIN_RANGE:
        return "VK_STENCIL_OP_BEGIN_RANGE";
      case VK_STENCIL_OP_END_RANGE:
        return "VK_STENCIL_OP_END_RANGE";
      case VK_STENCIL_OP_RANGE_SIZE:
        return "VK_STENCIL_OP_RANGE_SIZE";
      case VK_STENCIL_OP_MAX_ENUM:
        return "VK_STENCIL_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkLogicOp& value)
    {
      switch(value)
      {
      case VK_LOGIC_OP_CLEAR:
        return "VK_LOGIC_OP_CLEAR";
      case VK_LOGIC_OP_AND:
        return "VK_LOGIC_OP_AND";
      case VK_LOGIC_OP_AND_REVERSE:
        return "VK_LOGIC_OP_AND_REVERSE";
      case VK_LOGIC_OP_COPY:
        return "VK_LOGIC_OP_COPY";
      case VK_LOGIC_OP_AND_INVERTED:
        return "VK_LOGIC_OP_AND_INVERTED";
      case VK_LOGIC_OP_NO_OP:
        return "VK_LOGIC_OP_NO_OP";
      case VK_LOGIC_OP_XOR:
        return "VK_LOGIC_OP_XOR";
      case VK_LOGIC_OP_OR:
        return "VK_LOGIC_OP_OR";
      case VK_LOGIC_OP_NOR:
        return "VK_LOGIC_OP_NOR";
      case VK_LOGIC_OP_EQUIVALENT:
        return "VK_LOGIC_OP_EQUIVALENT";
      case VK_LOGIC_OP_INVERT:
        return "VK_LOGIC_OP_INVERT";
      case VK_LOGIC_OP_OR_REVERSE:
        return "VK_LOGIC_OP_OR_REVERSE";
      case VK_LOGIC_OP_COPY_INVERTED:
        return "VK_LOGIC_OP_COPY_INVERTED";
      case VK_LOGIC_OP_OR_INVERTED:
        return "VK_LOGIC_OP_OR_INVERTED";
      case VK_LOGIC_OP_NAND:
        return "VK_LOGIC_OP_NAND";
      case VK_LOGIC_OP_SET:
        return "VK_LOGIC_OP_SET";
      case VK_LOGIC_OP_BEGIN_RANGE:
        return "VK_LOGIC_OP_BEGIN_RANGE";
      case VK_LOGIC_OP_END_RANGE:
        return "VK_LOGIC_OP_END_RANGE";
      case VK_LOGIC_OP_RANGE_SIZE:
        return "VK_LOGIC_OP_RANGE_SIZE";
      case VK_LOGIC_OP_MAX_ENUM:
        return "VK_LOGIC_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkMemoryPropertyFlagBits& value)
    {
      switch(value)
      {
      case VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT:
        return "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT";
      case VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT:
        return "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT";
      case VK_MEMORY_PROPERTY_HOST_COHERENT_BIT:
        return "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT";
      case VK_MEMORY_PROPERTY_HOST_CACHED_BIT:
        return "VK_MEMORY_PROPERTY_HOST_CACHED_BIT";
      case VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT:
        return "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT";
      case VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM:
        return "VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkBlendFactor& value)
    {
      switch(value)
      {
      case VK_BLEND_FACTOR_ZERO:
        return "VK_BLEND_FACTOR_ZERO";
      case VK_BLEND_FACTOR_ONE:
        return "VK_BLEND_FACTOR_ONE";
      case VK_BLEND_FACTOR_SRC_COLOR:
        return "VK_BLEND_FACTOR_SRC_COLOR";
      case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
        return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
      case VK_BLEND_FACTOR_DST_COLOR:
        return "VK_BLEND_FACTOR_DST_COLOR";
      case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR:
        return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
      case VK_BLEND_FACTOR_SRC_ALPHA:
        return "VK_BLEND_FACTOR_SRC_ALPHA";
      case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
        return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
      case VK_BLEND_FACTOR_DST_ALPHA:
        return "VK_BLEND_FACTOR_DST_ALPHA";
      case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
        return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
      case VK_BLEND_FACTOR_CONSTANT_COLOR:
        return "VK_BLEND_FACTOR_CONSTANT_COLOR";
      case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
        return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
      case VK_BLEND_FACTOR_CONSTANT_ALPHA:
        return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
      case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
        return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
      case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE:
        return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
      case VK_BLEND_FACTOR_SRC1_COLOR:
        return "VK_BLEND_FACTOR_SRC1_COLOR";
      case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:
        return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
      case VK_BLEND_FACTOR_SRC1_ALPHA:
        return "VK_BLEND_FACTOR_SRC1_ALPHA";
      case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:
        return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
      case VK_BLEND_FACTOR_BEGIN_RANGE:
        return "VK_BLEND_FACTOR_BEGIN_RANGE";
      case VK_BLEND_FACTOR_END_RANGE:
        return "VK_BLEND_FACTOR_END_RANGE";
      case VK_BLEND_FACTOR_RANGE_SIZE:
        return "VK_BLEND_FACTOR_RANGE_SIZE";
      case VK_BLEND_FACTOR_MAX_ENUM:
        return "VK_BLEND_FACTOR_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkDynamicState& value)
    {
      switch(value)
      {
      case VK_DYNAMIC_STATE_VIEWPORT:
        return "VK_DYNAMIC_STATE_VIEWPORT";
      case VK_DYNAMIC_STATE_SCISSOR:
        return "VK_DYNAMIC_STATE_SCISSOR";
      case VK_DYNAMIC_STATE_LINE_WIDTH:
        return "VK_DYNAMIC_STATE_LINE_WIDTH";
      case VK_DYNAMIC_STATE_DEPTH_BIAS:
        return "VK_DYNAMIC_STATE_DEPTH_BIAS";
      case VK_DYNAMIC_STATE_BLEND_CONSTANTS:
        return "VK_DYNAMIC_STATE_BLEND_CONSTANTS";
      case VK_DYNAMIC_STATE_DEPTH_BOUNDS:
        return "VK_DYNAMIC_STATE_DEPTH_BOUNDS";
      case VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK:
        return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK";
      case VK_DYNAMIC_STATE_STENCIL_WRITE_MASK:
        return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK";
      case VK_DYNAMIC_STATE_STENCIL_REFERENCE:
        return "VK_DYNAMIC_STATE_STENCIL_REFERENCE";
      case VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV:
        return "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV";
      case VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT:
        return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT";
      case VK_DYNAMIC_STATE_BEGIN_RANGE:
        return "VK_DYNAMIC_STATE_BEGIN_RANGE";
      case VK_DYNAMIC_STATE_END_RANGE:
        return "VK_DYNAMIC_STATE_END_RANGE";
      case VK_DYNAMIC_STATE_RANGE_SIZE:
        return "VK_DYNAMIC_STATE_RANGE_SIZE";
      case VK_DYNAMIC_STATE_MAX_ENUM:
        return "VK_DYNAMIC_STATE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkFilter& value)
    {
      switch(value)
      {
      case VK_FILTER_NEAREST:
        return "VK_FILTER_NEAREST";
      case VK_FILTER_LINEAR:
        return "VK_FILTER_LINEAR";
      case VK_FILTER_CUBIC_IMG:
        return "VK_FILTER_CUBIC_IMG";
      case VK_FILTER_BEGIN_RANGE:
        return "VK_FILTER_BEGIN_RANGE";
      case VK_FILTER_END_RANGE:
        return "VK_FILTER_END_RANGE";
      case VK_FILTER_RANGE_SIZE:
        return "VK_FILTER_RANGE_SIZE";
      case VK_FILTER_MAX_ENUM:
        return "VK_FILTER_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkDependencyFlagBits& value)
    {
      switch(value)
      {
      case VK_DEPENDENCY_BY_REGION_BIT:
        return "VK_DEPENDENCY_BY_REGION_BIT";
      case VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX:
        return "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHX";
      case VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX:
        return "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHX";
      case VK_DEPENDENCY_FLAG_BITS_MAX_ENUM:
        return "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSamplerAddressMode& value)
    {
      switch(value)
      {
      case VK_SAMPLER_ADDRESS_MODE_REPEAT:
        return "VK_SAMPLER_ADDRESS_MODE_REPEAT";
      case VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
        return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
      case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
        return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
      case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
        return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
      case VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE:
        return "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE";
      case VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE:
        return "VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE";
      case VK_SAMPLER_ADDRESS_MODE_END_RANGE:
        return "VK_SAMPLER_ADDRESS_MODE_END_RANGE";
      case VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE:
        return "VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE";
      case VK_SAMPLER_ADDRESS_MODE_MAX_ENUM:
        return "VK_SAMPLER_ADDRESS_MODE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkDescriptorSetLayoutCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR:
        return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR";
      case VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSamplerMipmapMode& value)
    {
      switch(value)
      {
      case VK_SAMPLER_MIPMAP_MODE_NEAREST:
        return "VK_SAMPLER_MIPMAP_MODE_NEAREST";
      case VK_SAMPLER_MIPMAP_MODE_LINEAR:
        return "VK_SAMPLER_MIPMAP_MODE_LINEAR";
      case VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE:
        return "VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE";
      case VK_SAMPLER_MIPMAP_MODE_END_RANGE:
        return "VK_SAMPLER_MIPMAP_MODE_END_RANGE";
      case VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE:
        return "VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE";
      case VK_SAMPLER_MIPMAP_MODE_MAX_ENUM:
        return "VK_SAMPLER_MIPMAP_MODE_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSubpassContents& value)
    {
      switch(value)
      {
      case VK_SUBPASS_CONTENTS_INLINE:
        return "VK_SUBPASS_CONTENTS_INLINE";
      case VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS:
        return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
      case VK_SUBPASS_CONTENTS_BEGIN_RANGE:
        return "VK_SUBPASS_CONTENTS_BEGIN_RANGE";
      case VK_SUBPASS_CONTENTS_END_RANGE:
        return "VK_SUBPASS_CONTENTS_END_RANGE";
      case VK_SUBPASS_CONTENTS_RANGE_SIZE:
        return "VK_SUBPASS_CONTENTS_RANGE_SIZE";
      case VK_SUBPASS_CONTENTS_MAX_ENUM:
        return "VK_SUBPASS_CONTENTS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkBorderColor& value)
    {
      switch(value)
      {
      case VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK:
        return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK";
      case VK_BORDER_COLOR_INT_TRANSPARENT_BLACK:
        return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK";
      case VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK:
        return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK";
      case VK_BORDER_COLOR_INT_OPAQUE_BLACK:
        return "VK_BORDER_COLOR_INT_OPAQUE_BLACK";
      case VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE:
        return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE";
      case VK_BORDER_COLOR_INT_OPAQUE_WHITE:
        return "VK_BORDER_COLOR_INT_OPAQUE_WHITE";
      case VK_BORDER_COLOR_BEGIN_RANGE:
        return "VK_BORDER_COLOR_BEGIN_RANGE";
      case VK_BORDER_COLOR_END_RANGE:
        return "VK_BORDER_COLOR_END_RANGE";
      case VK_BORDER_COLOR_RANGE_SIZE:
        return "VK_BORDER_COLOR_RANGE_SIZE";
      case VK_BORDER_COLOR_MAX_ENUM:
        return "VK_BORDER_COLOR_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkAttachmentLoadOp& value)
    {
      switch(value)
      {
      case VK_ATTACHMENT_LOAD_OP_LOAD:
        return "VK_ATTACHMENT_LOAD_OP_LOAD";
      case VK_ATTACHMENT_LOAD_OP_CLEAR:
        return "VK_ATTACHMENT_LOAD_OP_CLEAR";
      case VK_ATTACHMENT_LOAD_OP_DONT_CARE:
        return "VK_ATTACHMENT_LOAD_OP_DONT_CARE";
      case VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE:
        return "VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE";
      case VK_ATTACHMENT_LOAD_OP_END_RANGE:
        return "VK_ATTACHMENT_LOAD_OP_END_RANGE";
      case VK_ATTACHMENT_LOAD_OP_RANGE_SIZE:
        return "VK_ATTACHMENT_LOAD_OP_RANGE_SIZE";
      case VK_ATTACHMENT_LOAD_OP_MAX_ENUM:
        return "VK_ATTACHMENT_LOAD_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkFormatFeatureFlagBits& value)
    {
      switch(value)
      {
      case VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT:
        return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT";
      case VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT:
        return "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT";
      case VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT:
        return "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT";
      case VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT:
        return "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT";
      case VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT:
        return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT";
      case VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT:
        return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT";
      case VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT:
        return "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT";
      case VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT:
        return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT";
      case VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT:
        return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT";
      case VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT:
        return "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT";
      case VK_FORMAT_FEATURE_BLIT_SRC_BIT:
        return "VK_FORMAT_FEATURE_BLIT_SRC_BIT";
      case VK_FORMAT_FEATURE_BLIT_DST_BIT:
        return "VK_FORMAT_FEATURE_BLIT_DST_BIT";
      case VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT:
        return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT";
      case VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG:
        return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG";
      case VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR:
        return "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR";
      case VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR:
        return "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR";
      case VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM:
        return "VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkAttachmentStoreOp& value)
    {
      switch(value)
      {
      case VK_ATTACHMENT_STORE_OP_STORE:
        return "VK_ATTACHMENT_STORE_OP_STORE";
      case VK_ATTACHMENT_STORE_OP_DONT_CARE:
        return "VK_ATTACHMENT_STORE_OP_DONT_CARE";
      case VK_ATTACHMENT_STORE_OP_BEGIN_RANGE:
        return "VK_ATTACHMENT_STORE_OP_BEGIN_RANGE";
      case VK_ATTACHMENT_STORE_OP_END_RANGE:
        return "VK_ATTACHMENT_STORE_OP_END_RANGE";
      case VK_ATTACHMENT_STORE_OP_RANGE_SIZE:
        return "VK_ATTACHMENT_STORE_OP_RANGE_SIZE";
      case VK_ATTACHMENT_STORE_OP_MAX_ENUM:
        return "VK_ATTACHMENT_STORE_OP_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkPipelineBindPoint& value)
    {
      switch(value)
      {
      case VK_PIPELINE_BIND_POINT_GRAPHICS:
        return "VK_PIPELINE_BIND_POINT_GRAPHICS";
      case VK_PIPELINE_BIND_POINT_COMPUTE:
        return "VK_PIPELINE_BIND_POINT_COMPUTE";
      case VK_PIPELINE_BIND_POINT_BEGIN_RANGE:
        return "VK_PIPELINE_BIND_POINT_BEGIN_RANGE";
      case VK_PIPELINE_BIND_POINT_END_RANGE:
        return "VK_PIPELINE_BIND_POINT_END_RANGE";
      case VK_PIPELINE_BIND_POINT_RANGE_SIZE:
        return "VK_PIPELINE_BIND_POINT_RANGE_SIZE";
      case VK_PIPELINE_BIND_POINT_MAX_ENUM:
        return "VK_PIPELINE_BIND_POINT_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageUsageFlagBits& value)
    {
      switch(value)
      {
      case VK_IMAGE_USAGE_TRANSFER_SRC_BIT:
        return "VK_IMAGE_USAGE_TRANSFER_SRC_BIT";
      case VK_IMAGE_USAGE_TRANSFER_DST_BIT:
        return "VK_IMAGE_USAGE_TRANSFER_DST_BIT";
      case VK_IMAGE_USAGE_SAMPLED_BIT:
        return "VK_IMAGE_USAGE_SAMPLED_BIT";
      case VK_IMAGE_USAGE_STORAGE_BIT:
        return "VK_IMAGE_USAGE_STORAGE_BIT";
      case VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT:
        return "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT";
      case VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT:
        return "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT";
      case VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT:
        return "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT";
      case VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT:
        return "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT";
      case VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM:
        return "VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkImageCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_IMAGE_CREATE_SPARSE_BINDING_BIT:
        return "VK_IMAGE_CREATE_SPARSE_BINDING_BIT";
      case VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT:
        return "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT";
      case VK_IMAGE_CREATE_SPARSE_ALIASED_BIT:
        return "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT";
      case VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT:
        return "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT";
      case VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT:
        return "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT";
      case VK_IMAGE_CREATE_BIND_SFR_BIT_KHX:
        return "VK_IMAGE_CREATE_BIND_SFR_BIT_KHX";
      case VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR:
        return "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR";
      case VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSampleCountFlagBits& value)
    {
      switch(value)
      {
      case VK_SAMPLE_COUNT_1_BIT:
        return "VK_SAMPLE_COUNT_1_BIT";
      case VK_SAMPLE_COUNT_2_BIT:
        return "VK_SAMPLE_COUNT_2_BIT";
      case VK_SAMPLE_COUNT_4_BIT:
        return "VK_SAMPLE_COUNT_4_BIT";
      case VK_SAMPLE_COUNT_8_BIT:
        return "VK_SAMPLE_COUNT_8_BIT";
      case VK_SAMPLE_COUNT_16_BIT:
        return "VK_SAMPLE_COUNT_16_BIT";
      case VK_SAMPLE_COUNT_32_BIT:
        return "VK_SAMPLE_COUNT_32_BIT";
      case VK_SAMPLE_COUNT_64_BIT:
        return "VK_SAMPLE_COUNT_64_BIT";
      case VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM:
        return "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSparseImageFormatFlagBits& value)
    {
      switch(value)
      {
      case VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT:
        return "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT";
      case VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT:
        return "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT";
      case VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT:
        return "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT";
      case VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM:
        return "VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSparseMemoryBindFlagBits& value)
    {
      switch(value)
      {
      case VK_SPARSE_MEMORY_BIND_METADATA_BIT:
        return "VK_SPARSE_MEMORY_BIND_METADATA_BIT";
      case VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM:
        return "VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkBufferCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_BUFFER_CREATE_SPARSE_BINDING_BIT:
        return "VK_BUFFER_CREATE_SPARSE_BINDING_BIT";
      case VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT:
        return "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT";
      case VK_BUFFER_CREATE_SPARSE_ALIASED_BIT:
        return "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT";
      case VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkShaderStageFlagBits& value)
    {
      switch(value)
      {
      case VK_SHADER_STAGE_VERTEX_BIT:
        return "VK_SHADER_STAGE_VERTEX_BIT";
      case VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT:
        return "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT";
      case VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT:
        return "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT";
      case VK_SHADER_STAGE_GEOMETRY_BIT:
        return "VK_SHADER_STAGE_GEOMETRY_BIT";
      case VK_SHADER_STAGE_FRAGMENT_BIT:
        return "VK_SHADER_STAGE_FRAGMENT_BIT";
      case VK_SHADER_STAGE_COMPUTE_BIT:
        return "VK_SHADER_STAGE_COMPUTE_BIT";
      case VK_SHADER_STAGE_ALL_GRAPHICS:
        return "VK_SHADER_STAGE_ALL_GRAPHICS";
      case VK_SHADER_STAGE_ALL:
        return "VK_SHADER_STAGE_ALL";
      case VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM:
        return "VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCullModeFlagBits& value)
    {
      switch(value)
      {
      case VK_CULL_MODE_NONE:
        return "VK_CULL_MODE_NONE";
      case VK_CULL_MODE_FRONT_BIT:
        return "VK_CULL_MODE_FRONT_BIT";
      case VK_CULL_MODE_BACK_BIT:
        return "VK_CULL_MODE_BACK_BIT";
      case VK_CULL_MODE_FRONT_AND_BACK:
        return "VK_CULL_MODE_FRONT_AND_BACK";
      case VK_CULL_MODE_FLAG_BITS_MAX_ENUM:
        return "VK_CULL_MODE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkColorComponentFlagBits& value)
    {
      switch(value)
      {
      case VK_COLOR_COMPONENT_R_BIT:
        return "VK_COLOR_COMPONENT_R_BIT";
      case VK_COLOR_COMPONENT_G_BIT:
        return "VK_COLOR_COMPONENT_G_BIT";
      case VK_COLOR_COMPONENT_B_BIT:
        return "VK_COLOR_COMPONENT_B_BIT";
      case VK_COLOR_COMPONENT_A_BIT:
        return "VK_COLOR_COMPONENT_A_BIT";
      case VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM:
        return "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkAttachmentDescriptionFlagBits& value)
    {
      switch(value)
      {
      case VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT:
        return "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT";
      case VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM:
        return "VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkSubpassDescriptionFlagBits& value)
    {
      switch(value)
      {
      case VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX:
        return "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX";
      case VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX:
        return "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX";
      case VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM:
        return "VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCommandPoolCreateFlagBits& value)
    {
      switch(value)
      {
      case VK_COMMAND_POOL_CREATE_TRANSIENT_BIT:
        return "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT";
      case VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT:
        return "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT";
      case VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM:
        return "VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCommandPoolResetFlagBits& value)
    {
      switch(value)
      {
      case VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT:
        return "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT";
      case VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM:
        return "VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkQueryControlFlagBits& value)
    {
      switch(value)
      {
      case VK_QUERY_CONTROL_PRECISE_BIT:
        return "VK_QUERY_CONTROL_PRECISE_BIT";
      case VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM:
        return "VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkCommandBufferResetFlagBits& value)
    {
      switch(value)
      {
      case VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT:
        return "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT";
      case VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM:
        return "VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };


    const char* ToString(const VkStencilFaceFlagBits& value)
    {
      switch(value)
      {
      case VK_STENCIL_FACE_FRONT_BIT:
        return "VK_STENCIL_FACE_FRONT_BIT";
      case VK_STENCIL_FACE_BACK_BIT:
        return "VK_STENCIL_FACE_BACK_BIT";
      case VK_STENCIL_FRONT_AND_BACK:
        return "VK_STENCIL_FRONT_AND_BACK";
      case VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM:
        return "VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM";
      default:
        return "*Unknown*";
      }
    };
  }
}

#endif
